# =====================================================
# Playbook: deploy.yml
# Scope   : Provision EC2 host, install/upgrade Minikube,
#           deploy applicazione WasteVision e pubblicare le porte.
# =====================================================

- hosts: productEC2
  become: true

  vars:
    project_dir: /home/ec2-user/WasteVision_-_Evaluation
    repo_url: "https://github.com/RaffaeleCali/WasteVision_-_Evaluation.git"
    repo_branch: main
    kube_ns: wastevision
    manifests_dir: "{{ project_dir }}/deployment"
    minikube_opts: >
      --driver=docker
      --memory=2200mb
      --cpus=2
      --container-runtime=containerd
      --addons=ingress

  tasks:
    # -------------------------------------------------
    # Pacchetti base + Docker service
    # -------------------------------------------------
    - name: Ensure Git and Docker are installed
      package:
        name: ['git', 'docker']
        state: present

    - name: Enable/start Docker
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    # -------------------------------------------------
    # Repo checkout
    # -------------------------------------------------
    - name: Clone (or update) repo
      git:
        repo: "{{ repo_url }}"
        dest: "{{ project_dir }}"
        version: "{{ repo_branch }}"
        force: true
      become: false

    # -------------------------------------------------
    # Minikube / kubectl install (if missing)
    # -------------------------------------------------
    - name: Ensure Minikube binary is present
      stat:
        path: /usr/local/bin/minikube
      register: mk_stat

    - name: Download Minikube
      get_url:
        url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        dest: /usr/local/bin/minikube
        mode: "0755"
      when: not mk_stat.stat.exists

    - name: Ensure kubectl binary is present
      stat:
        path: /usr/local/bin/kubectl
      register: kubectl_stat

    - name: Download kubectl
      shell: |
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        install -m 0755 kubectl /usr/local/bin/kubectl
      when: not kubectl_stat.stat.exists

    # -------------------------------------------------
    # Avvio / restart del cluster
    # -------------------------------------------------
    - name: Delete existing cluster (idempotente)
      command: minikube delete
      register: delete_out
      changed_when: "'Deleting' in delete_out.stdout"
      failed_when: false

    - name: Start Minikube (run as root per evitare sg/newgrp)
      command: >
        minikube start {{ minikube_opts }}
      environment:
        MINIKUBE_IN_STYLE: "false"    # niente TTY check
      register: mkout

    - debug: var=mkout.stdout_lines

    # -------------------------------------------------
    # Deploy manifest
    # -------------------------------------------------
    - name: Apply namespace.yaml first
      command: kubectl apply -f {{ manifests_dir }}/namespace.yaml
      become: false

    - name: Wait until namespace exists
      command: kubectl get ns {{ kube_ns }} --no-headers
      retries: 10
      delay: 3
      register: ns_check
      until: ns_check.rc == 0
      become: false

    - name: Apply remaining manifests
      become: false
      command: kubectl apply -f {{ item }}
      loop: "{{ query('fileglob', manifests_dir + '/*.yaml') }}"
      when: "'namespace.yaml' not in item"

    # -------------------------------------------------
    # Wait for all pods to be Ready
    # -------------------------------------------------
    - name: Wait for pods ready
      become: false
      command: >
        kubectl wait --for=condition=Ready pod --all
        -n {{ kube_ns }} --timeout=300s

    - name: Show final pod status
      become: false
      command: kubectl get pods -n {{ kube_ns }} -o wide

    # -------------------------------------------------
    # (Opzionale) Port-forward asincroni
    # -------------------------------------------------
    - name: Forward Ollama (async)
      become: false
      command: kubectl port-forward svc/ollama-service 11434:11434 --address 0.0.0.0
      async: 0
      poll: 0

    - name: Forward API server (async)
      become: false
      command: kubectl port-forward svc/server-service 5000:5000 --address 0.0.0.0
      async: 0
      poll: 0

    - name: Forward client (async)
      become: false
      command: kubectl port-forward svc/client-service 8501:8501 --address 0.0.0.0
      async: 0
      poll: 0
