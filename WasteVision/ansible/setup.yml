# =============================================================
# Playbook: deploy.yml
# Scopo   : Provision host EC2, installa/aggiorna Minikube,
#           deploy di WasteVision e port-forward dei servizi.
# =============================================================

- hosts: productEC2
  become: true

  vars:
    project_dir: /home/ec2-user/WasteVision_-_Evaluation
    repo_url: "https://github.com/RaffaeleCali/WasteVision_-_Evaluation.git"
    repo_branch: main

    kube_ns: wastevsion                                   
    manifests_dir: "{{ project_dir }}/WasteVision/deployment"

    minikube_opts: >
      --driver=docker
      --memory=2200mb
      --cpus=2
      --container-runtime=containerd
      --addons=ingress

  tasks:
  # -----------------------------------------------------------
  # Pacchetti base + Docker
  # -----------------------------------------------------------
  - name: Ensure Git and Docker are installed
    ansible.builtin.package:
      name: [ git, docker ]
      state: present

  - name: Enable and start Docker
    ansible.builtin.systemd:
      name: docker
      state: started
      enabled: true

  # -----------------------------------------------------------
  # Checkout repository
  # -----------------------------------------------------------
  - name: Clone (or update) WasteVision repo
    ansible.builtin.git:
      repo: "{{ repo_url }}"
      dest: "{{ project_dir }}"
      version: "{{ repo_branch }}"
      force: true
    become: false          # eseguito da ec2-user

  # -----------------------------------------------------------
  # Install kubectl & Minikube se mancano
  # -----------------------------------------------------------
  - name: Ensure Minikube binary is present
    ansible.builtin.stat:
      path: /usr/local/bin/minikube
    register: mk_stat

  - name: Download Minikube
    ansible.builtin.get_url:
      url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
      dest: /usr/local/bin/minikube
      mode: "0755"
    when: not mk_stat.stat.exists

  - name: Ensure kubectl binary is present
    ansible.builtin.stat:
      path: /usr/local/bin/kubectl
    register: kubectl_stat

  - name: Download kubectl
    ansible.builtin.shell: |
      curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
      install -m 0755 kubectl /usr/local/bin/kubectl
    when: not kubectl_stat.stat.exists

  # -----------------------------------------------------------
  # Avvio cluster con utente ec2-user
  # -----------------------------------------------------------
  - name: Add ec2-user to docker group
    ansible.builtin.user:
      name: ec2-user
      groups: docker
      append: yes

  - name: Refresh SSH connection so new groups are picked up
    ansible.builtin.meta: reset_connection
    become: false          # da qui in poi task eseguiti come ec2-user

  # (Opzionale) elimina eventuale cluster precedente
  - name: Delete existing Minikube cluster (if any)
    ansible.builtin.shell: |
      sg docker -c "minikube delete || true"
    args:
      executable: /bin/bash
    changed_when: false
    ignore_errors: true

  # Avvio Minikube
  - name: Start Minikube as ec2-user (sg docker)
    ansible.builtin.shell: |
      sg docker -c "minikube start {{ minikube_opts }}"
    args:
      executable: /bin/bash
    register: minikube_start
    become: false

  - ansible.builtin.debug:
      var: minikube_start.stdout_lines

  # -----------------------------------------------------------
  # Deploy dei manifest
  # -----------------------------------------------------------
  - name: Apply namespace.yaml
    ansible.builtin.command: kubectl apply -f {{ manifests_dir }}/namespace.yaml
    become: false

  - name: Wait until namespace exists
    ansible.builtin.command: kubectl get ns {{ kube_ns }} --no-headers
    register: ns_check
    retries: 10
    delay: 3
    until: ns_check.rc == 0
    become: false
  - name: Apply every manifest in deployment directory
    ansible.builtin.command: kubectl apply -n {{ kube_ns }} -f {{ manifests_dir }}
    become: false


  # -----------------------------------------------------------
  # Attesa pod Ready e riepilogo
  # -----------------------------------------------------------
  - name: Count pods in namespace
    ansible.builtin.command: kubectl get pods -n {{ kube_ns }} --no-headers
    register: pod_list
    failed_when: false
    changed_when: false
    become: false

  - name: Wait for all pods to be Ready
    ansible.builtin.command: >
      kubectl wait --for=condition=Ready pod --all
      -n {{ kube_ns }} --timeout=280s
    when: pod_list.stdout != ""
    become: false

  - name: Show final pod status
    ansible.builtin.command: kubectl get pods -n {{ kube_ns }} -o wide
    become: false

  # -----------------------------------------------------------
  # Port-forward asincroni (opzionali)
  # -----------------------------------------------------------
# --- Port-forward tasks ---
#- name: Forward Ollama (async)
#  command: kubectl port-forward -n {{ kube_ns }} svc/ollama-service 11434:11434 --address 0.0.0.0
#  async: 0
#  poll: 0
#  become: false
#

#  - name: Forward API server (async)
#    ansible.builtin.command: kubectl port-forward svc/server-service 5000:5000 --address 0.0.0.0
#    async: 0
#    poll: 0
#    become: false
# -----------------------------------------------------------------
  - name: Wait until react-frontend service exists
    command: kubectl get svc/react-frontend -n {{ kube_ns }}
    register: svc_check
    retries: 15
    delay: 20
    until: svc_check.rc == 0
    become: false

  # -----------------------------------------------------------------
  # Port-forward solo React (in background)
  # -----------------------------------------------------------------
  - name: Port-forward React client (BG)
    shell: |
      nohup kubectl port-forward -n {{ kube_ns }} \
        svc/react-frontend 30080:5000 --address 0.0.0.0 \
        > /dev/null 2>&1 &
    async: 0
    poll: 0
    become: false