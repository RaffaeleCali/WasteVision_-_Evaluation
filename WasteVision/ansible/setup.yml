# =====================================================
# Playbook: deploy.yml
# Scope   : Provision EC2 host, install/upgrade Minikube,
#           clone repo, apply Kubernetes manifests.
# =====================================================

- name: Deploy WasteVision_-_Evaluation on EC2 Minikube
  hosts: productEC2
  become: true

  vars:
    project_dir: /home/ec2-user/WasteVision_-_Evaluation
    repo_url: "https://github.com/RaffaeleCali/WasteVision_-_Evaluation.git"
    repo_branch: main
    manifests_dir: "{{ project_dir }}/WasteVision/deployment"

  tasks:
  # -------------------------------------------------
  #  Pacchetti di base
  # -------------------------------------------------
  - name: Ensure Git is installed
    package:
      name: git
      state: present

  - name: Ensure Docker group exists
    group:
      name: docker
      state: present

  - name: Add ec2-user to docker group
    user:
      name: ec2-user
      groups: docker
      append: true

  # -------------------------------------------------
  #  Checkout del progetto
  # -------------------------------------------------
  - name: Clone (o aggiorna) il repository
    git:
      repo: "{{ repo_url }}"
      dest: "{{ project_dir }}"
      version: "{{ repo_branch }}"
      force: true
    become: false

  # -------------------------------------------------
  #  Installazione Minikube/kubectl/docker se mancano
  # -------------------------------------------------
  - name: Verifica presenza Minikube
    command: which minikube
    register: minikube_cli
    ignore_errors: true
    become: false

  - block:
      - name: Installa kubectl
        shell: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/kubectl

      - name: Installa Docker
        shell: |
          yum update -y
          yum install -y docker
          systemctl enable --now docker

      - name: Installa Minikube
        shell: |
          curl -Lo /usr/local/bin/minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x /usr/local/bin/minikube
    when: minikube_cli.rc != 0
    become: true

  # -------------------------------------------------
  #  Docker service management
  # -------------------------------------------------
  - name: Ensure Docker service is running
    systemd:
      name: docker
      state: started
      enabled: true

  - name: Add ec2-user to docker group (ensure it's applied)
    user:
      name: ec2-user
      groups: docker
      append: true

  # -------------------------------------------------
  #  (Ri)avvio cluster Minikube
  # -------------------------------------------------
  - name: Arresta Minikube (se in esecuzione)
    shell: minikube stop || true
    when: minikube_cli.rc == 0
    ignore_errors: true
    become: false

  - name: Elimina Minikube (se esiste)
    shell: minikube delete || true
    when: minikube_cli.rc == 0
    ignore_errors: true
    become: false

  # FIXED: Replace the problematic newgrp command with a simple verification
  - name: Verify Docker group membership
    shell: groups ec2-user | grep -q docker
    register: docker_group_check
    ignore_errors: true

  - name: Debug Docker group membership
    debug:
      msg: "Docker group membership check result: {{ docker_group_check.rc }}"

  # Alternative approach: Use sg command or restart SSH connection
  - name: Avvia Minikube con driver Docker
    shell: |
      # Use sg to run minikube with docker group privileges
      sg docker -c "minikube start \
        --driver=docker \
        --memory=2200mb \
        --cpus=2 \
        --container-runtime=containerd \
        --addons=ingress"
    args:
      executable: /bin/bash
    become: false
    register: minikube_start
    ignore_errors: true

  # Fallback: If sg doesn't work, try with sudo
  - name: Avvia Minikube con sudo (fallback)
    shell: |
      sudo -u ec2-user minikube start \
        --driver=docker \
        --memory=2200mb \
        --cpus=2 \
        --container-runtime=containerd \
        --addons=ingress
    args:
      executable: /bin/bash
    when: minikube_start.failed
    become: true

  # -------------------------------------------------
  #  Applicazione manifest Kubernetes
  # -------------------------------------------------
  - name: Verifica che namespace.yaml esista
    stat:
      path: "{{ manifests_dir }}/namespace.yaml"
    register: ns_file
    become: false

  - name: Ferma playbook se namespace.yaml non trovato
    fail:
      msg: "namespace.yaml non esiste in {{ manifests_dir }}"
    when: not ns_file.stat.exists

  - name: Applica namespace.yaml
    shell: kubectl apply -f {{ manifests_dir }}/namespace.yaml
    become: false

  - name: Attendi che il namespace sia creato
    shell: |
      for i in {1..10}; do
        kubectl get ns wastevsion && exit 0
        sleep 2
      done
      echo "Namespace not found" >&2
      exit 1
    become: false

  - name: Applica tutti gli altri manifest
    shell: |
      find {{ manifests_dir }} -type f ! -name 'namespace.yaml' -exec kubectl apply -f {} \;
    args:
      executable: /bin/bash
    become: false

  # -------------------------------------------------
  #  Wait until pods are Ready
  # -------------------------------------------------
  - name: Attendi che tutti i pod siano Ready
    shell: |
      set -euo pipefail
      echo "Waiting for podsâ€¦";
      kubectl wait --for=condition=Ready pods --all -n wastevsion --timeout=300s
    args:
      executable: /bin/bash
    become: false