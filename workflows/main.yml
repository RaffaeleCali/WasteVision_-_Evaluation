name: Build & Deploy Docker Images

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image_name: server
            context: ./WasteVision/server
          - image_name: react-frontend
            context: ./WasteVision/react_frontend

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & push ${{ matrix.image_name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            raffa8/${{ matrix.image_name }}:latest
            raffa8/${{ matrix.image_name }}:${{ github.sha }}
          cache-from: type=registry,ref=raffa8/${{ matrix.image_name }}:cache
          cache-to: type=registry,ref=raffa8/${{ matrix.image_name }}:cache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Load INSTANCE_PUBLIC_IP from .env
        id: load_env
        run: |
          if [ -f .env ]; then
            echo "Loading variables from .env"
            set -o allexport
            source .env
            set +o allexport
            if [ -z "$INSTANCE_PUBLIC_IP" ]; then
              echo "::error::INSTANCE_PUBLIC_IP missing in .env" && exit 1
            fi
            echo "ip=$INSTANCE_PUBLIC_IP" >> "$GITHUB_OUTPUT"
          else
            echo "::error::.env file not found" && exit 1
          fi

      - name: Run playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ./WasteVision/ansible/setup.yml
          key: ${{ secrets.SECRET_SSH_KEY }}
          inventory: |
            [productEC2]
            ${{ steps.load_env.outputs.ip }} ansible_user=ec2-user
          options: |
            --user ec2-user
            --ssh-extra-args "-o StrictHostKeyChecking=no -o GSSAPIAuthentication=no"
